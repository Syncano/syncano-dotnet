<?xml version="1.0" encoding="utf-8"?>
<topic id="6998a527-7e72-4aec-a2c7-f1f4f0732a3e" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>This is a documentation for Syncano.Net project. It is designed to enable you to connect to Syncano Instances from .Net applications</para>
    </introduction>

    <section>
      <title>Getting Started</title>
      <content>
        <para>To get started you have to obtain Syncano Instance name and Api Key. This credentials will allow you to connect to Syncano. Basically you have two options of connection:</para>
        <list class="bullet">
          <listItem>
            <para>Over Http to Syncano Rest Api.</para>
          </listItem>
          <listItem>
            <para>Over Tcp to Syncano Sync Server.</para>
          </listItem>
        </list>
      </content>
    </section>

    <section>
      <title>Syncano Rest Api</title>
      <content>
        <para>To connect to Syncano Rest Api you can use class Syncano.</para>
        <code>
          //Create Syncano class
          Syncano syncano = new Syncano(instanceName, apiKey);

          //Now you can access Syncano Instance
          ...
        </code>
        <para>Syncano class provides with multiple properties to manage certain aspects of Syncano Instance. All operatins can be performed asynchronously. They  have been prepared to use 'async' and 'await' operators.</para>
        <code>
          //Create new project
          Project project = await syncano.Projects.New("MyNewProject", "This is my first project in Syncano.");

          //Create collection in project
          Collection collection = await syncano.Collections.New(project.Id, "MyNewCollection");

          //Create new folder in collection
          Folder folder = await syncano.Folders.New(project.Id, "MyNewFolder", collection.Id);

          //Create new Data Object in folder
          DataObjectDefinitionRequest request = new DataObjectDefinitionRequest();
          request.ProjectId = project.Id;
          request.CollectionId = collection.Id;
          request.Folder = folder.Name;
          request.Title = "DataObject Title";
          request.Text = "Sample data object text content.";

          DataObject dataObject = await syncano.DataObjects.New(request);

          //Delete Data Object
          DataObjectSimpleQueryRequest deleteRequest = new DataObjectSimpleQueryRequest();
          deleteRequest.ProjectId = project.Id;
          deleteRequest.CollectionId = collection.Id;
          deleteRequest.Folder = folder.Name;
          deleteRequest.DataId = dataObject.Id;

          await syncano.DataObjects.Delete(deleteRequest);

          //Delete folder
          await syncano.Folders.Delete(project.Id, folder.Name, collection.Id);

          //Delete collection
          await syncano.Collections.Delete(project.Id, collection.Id);

          //Delete project
          await syncano.Projects.Delete(project.Id);
        </code>
        <para>Above basic example shows how to access and use Syncano Rest API using Syncano class. To find out more about possible operations and DataObject content inspect other parts of this documentation.</para>
      </content>
    </section>

    <section>
      <title>Syncano Sync Server</title>
      <content>
        <para>SyncServer class allows to connect to Syncano Instance over Tcp. SyncServer can perform all operations of Syncano class, for example creat and delete projects, collections, folders and data objects. Additional possibilities in SyncServer class include notifications mechanisms. Sync Server can send live time notifications about events that happened in Syncano Instance. It is possible to recieve this notifications by using SyncServer class. First, it is necessary to start server. Then you can subscribe to a project or collection and then subscribe to recieve notifications.</para>
        <code>
            //Create and start SyncServer
            SyncServer syncServer = new SyncServer(instanceName, apiKey);
            await syncServer.Start();

            //Subscribe to Default project
            await syncServer.RealTimeSync.SubscribeProject(projectId, Context.Connection);

            //Subscribe to recive notifications about new Data Objects
            syncServer.NewDataObservable.Subscribe(ndn =>
            {
                //Access NewDataNotification object
            });

            //Unsubscribe
            await syncServer.RealTimeSync.UnsubscribeProject(projectId);
        </code>
        <para>There are more types of notifiactions. It is also possible to send notification by hand using SendNotification method in RealTimeSync. To find out more inspect other parts of this documentation.</para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="7444d5ff-e3fb-44e3-b09a-839f12a226df" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>
